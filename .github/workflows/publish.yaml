name: Publish

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  init:
    name: Open draft release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create release text
        run: |
          G_TAG=${{ github.ref }}
          G_VERSION=${G_TAG#refs/tags/v}
          echo "G_VERSION=$G_VERSION" >> $GITHUB_ENV
          awk "NR==3 { print \$0 }; S && /^## / { S=0 } ; S { print \$0 }; /\[$G_VERSION\][^:]/ { S=1 }; /\[OpenWeather\]:/ { print \$0 }" < CHANGELOG.md > GH_RELEASE.md
      - name: Create Github release
        id: gh-release
        uses:  softprops/action-gh-release@v1
        with:
          name: girouette ${{ env.G_VERSION }}
          draft: true
          body_path: GH_RELEASE.md
          token: ${{ secrets.GSAMA_RELEASE_CREATION }}
  tarball:
    name: Build tarball
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - name: Install native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools pandoc
      - name: Build static release
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Ccodegen-units=1 -Clink-arg=-Wl,-z,relro
        with:
          command: build
          args: --verbose --release --no-default-features --features default-static --target x86_64-unknown-linux-musl
      - name: Prepare package
        run: |
          G_TAG=${{ github.ref }}
          G_VERSION=${G_TAG#refs/tags/v}
          DIST_DIR="girouette-$G_VERSION-x86_64-unknown-linux-musl"
          TARGET_FILE="$DIST_DIR.tar.gz"
          rm -rf "$DIST_DIR"
          mkdir -p "$DIST_DIR/complete"
          cp -p target/x86_64-unknown-linux-musl/release/girouette "$DIST_DIR"
          cp -p README.md "$DIST_DIR"
          cp -p CHANGELOG.md "$DIST_DIR"
          cp -p LICENSE-* "$DIST_DIR"
          cp -p target/x86_64-unknown-linux-musl/release/build/girouette-*/out/girouette.bash "$DIST_DIR/complete"
          cp -p target/x86_64-unknown-linux-musl/release/build/girouette-*/out/girouette.fish "$DIST_DIR/complete"
          cp -p target/x86_64-unknown-linux-musl/release/build/girouette-*/out/_girouette "$DIST_DIR/complete"
          pandoc -s --to man doc/girouette.1.md -o "$DIST_DIR/girouette.1"
          strip "$DIST_DIR/girouette"
          tar -czf "$TARGET_FILE" "$DIST_DIR"
          sha256sum "$TARGET_FILE" > "$TARGET_FILE.sha256"
      - name: Upload package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          G_TAG=${{ github.ref }}
          G_VERSION=${G_TAG#refs/tags/}
          gh release upload $G_VERSION *.tar.gz *.tar.gz.sha256
  debian:
    name: Build Debian package
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - name: Install native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends dpkg-dev musl-tools pandoc
      - name: Install cargo-deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb
      - name: Build static release
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Ccodegen-units=1 -Clink-arg=-Wl,-z,relro
        with:
          command: build
          args: --verbose --release --no-default-features --features default-static --target x86_64-unknown-linux-musl
      - name: Generate man page
        run: |
          pandoc -s --to man doc/girouette.1.md -o "girouette.1"
          gzip girouette.1
      - uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --verbose --no-build
      - name: Upload package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          G_TAG=${{ github.ref }}
          G_VERSION=${G_TAG#refs/tags/}
          gh release upload $G_VERSION "$(find target/debian/ -name "*.deb")"
